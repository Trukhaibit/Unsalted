// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unsalted.Models;

namespace Unsalted.Migrations
{
    [DbContext(typeof(ReviewContext))]
    [Migration("20211212173030_tertiary")]
    partial class tertiary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Unsalted.Models.Allergy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Examples")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reactions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Allergy");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Allergen = "Gluten",
                            Examples = "Bread, Wheat, Cereal, etc.",
                            Reactions = "Stomach ache, Rash, etc."
                        },
                        new
                        {
                            ID = 2,
                            Allergen = "Lactose",
                            Examples = "Milk, Cheese, Yogurt, etc.",
                            Reactions = "Bloating, Flatulence, etc."
                        },
                        new
                        {
                            ID = 3,
                            Allergen = "Egg",
                            Examples = "Bread, Wheat, Cereal, etc.",
                            Reactions = "Eczema, Hives, Nausea, etc."
                        });
                });

            modelBuilder.Entity("Unsalted.Models.Diet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Diet");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Explanation = "In accordance with Jewish Dietary Law",
                            Type = "Kosher"
                        });
                });

            modelBuilder.Entity("Unsalted.Models.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietID")
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AllergyID");

                    b.HasIndex("DietID");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AllergyID = 1,
                            Description = "A traditional Italian dish, although the meatballs were added by the Swedes.",
                            DietID = 1,
                            Item = "Spaghetti and Meatballs"
                        });
                });

            modelBuilder.Entity("Unsalted.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FoodID = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("Unsalted.Models.Food", b =>
                {
                    b.HasOne("Unsalted.Models.Allergy", "Allergen")
                        .WithMany("Food")
                        .HasForeignKey("AllergyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unsalted.Models.Diet", "Diet")
                        .WithMany("Food")
                        .HasForeignKey("DietID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unsalted.Models.Review", b =>
                {
                    b.HasOne("Unsalted.Models.Food", "Food")
                        .WithMany("Review")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
